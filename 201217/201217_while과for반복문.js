/* 
< while과 for반복문 >

상품 목록에서 상품을 차례대로 출력하거나, 숫자를 1부터 10까지 하나씩 증가시키면서 동일한 코드를 
반복 실행해야하는 경우가 있다. 
> 이럴땐 반복무을 사용해 코드를 여러 번 반복 할 수 있다.

< while 반복문 > 

while (condition) {
  // 코드
  // '반복문 본문(body)'이라 불림
}
condition (조건)이 truthy일 때! 반복문 본문의 코드가 실행된다.

아래 반복문은 조건 i < 3을 만족할 동안 i를 출력한다.
let i = 0;
while (i < 3) { // 0, 1, 2가 출력됩니다.
  alert( i );
  i++;
}

반복문 본문이 한 번 실행되는 것을 반복이라고 부른다. 
i++ 인해 반복문은 무한히 반복되지 않고 멈추게 된다. 하지만 브라우저에는 이런 무한 반복을 멈추게 해주는 
실질적인 수단을 제공한다. 

반복문 조건엔 비교 뿐만 아니라 모든 종류의 표현식, 변수가 올 수 있다. 조건은 while에 의해 평가되고
평가후엔 불린 값으로 변경된다. 

여기서 조건문을 while( i != 0 )을 짧게 줄여 while( i )로 !
let i = 3;
while (i) { // i가 0이 되면 조건이 falsy가 되므로 반복문이 멈춥니다.
  alert( i );
  i--;
}

< do...while 반복문 > 
이 문법을 사용하면 condition을 반복문 본문 아래로 옮길 수 있다. 
do {
  // 반복문 본문
} while (condition);
이때 본문이 먼저 실행되고, 조건을 확인 한 후 조건이 truthy인 동안엔 본문이 계속 실행된다. 

let i = 0;
do {
  alert( i );
  i++;
} while (i < 3);
do..while문법은 조건이 truthy인지 아닌지에 상관없이 본문을 최소한 한번이라도 실행하고 싶을 때만 사용해야한다. 
대다스의 상황에선 do..while보다 while문이 적합하다.

< for 반복문 >
for 반복문은 while 반복문보다는 복잡하지만 가장 많이 쓰이는 반복문이다. 
for (begin; condition; step) {
  // ... 반복문 본문 ...
}

for (let i = 0; i < 3; i++) { // 0, 1, 2가 출력.
  alert(i);
}

< for문의 구성요소 > 
begin	        i = 0	        반복문에 진입할 때 단 한 번 실행됩니다.
condition	    i < 3	        반복마다 해당 조건이 확인됩니다. false이면 반복문을 멈춥니다.
body	        alert(i)	    condition이 truthy일 동안 계속해서 실행됩니다.
step	        i++	            각 반복의 body가 실행된 이후에 실행됩니다.

// for (let i = 0; i < 3; i++) alert(i)

// begin을 실행함
let i = 0
// condition이 truthy이면 → body를 실행한 후, step을 실행함
if (i < 3) { alert(i); i++ }
// condition이 truthy이면 → body를 실행한 후, step을 실행함
if (i < 3) { alert(i); i++ }
// condition이 truthy이면 → body를 실행한 후, step을 실행함
if (i < 3) { alert(i); i++ }
// i == 3이므로 반복문 종료

< 인라인 변수 선언 > 
i를 반복문 안에서 선언하는 방식은 인라인 변수 선언이라고 부른다. 
이렇게 선언한 변수는 반복문 안에서만 접근 가능!!
for (let i = 0; i < 3; i++) {
  alert(i); // 0, 1, 2
}
alert(i); // Error: i is not defined

이 경우 외에 정의되어있는 변수를 사용할 수도 있다.
let i = 0;

for (i = 0; i < 3; i++) { // 기존에 정의된 변수 사용
  alert(i); // 0, 1, 2
}

alert(i); // 3, 반복문 밖에서 선언한 변수이므로 사용할 수 있음

< 구성 요소 생략하기 >
for문의 구성요소를 생략하는 것도 가능하다. 
반복문이 시작될 때 아무것도 할 필요가 없으면 begin을 생략하는것이 가능하다.

let i = 0; // i를 선언하고 값도 할당

for (; i < 3; i++) { // 'begin'이 필요하지 않기 때문에 생략
  alert( i ); // 0, 1, 2
}

step도 생략이 가능하다.

let i = 0;

for (; i < 3;) {
  alert( i++ );
}

모든 구성요소를 생략할 수도 있는데 이렇게 되면 무한 반복문이 만들어진다.

< 반복문 빠져나오기 >
대개는 반복문의 조건이 falsy가 되면 반복문이 종료된다. 
그런데 특별한 지시자인 break를 사용하면 언제든 원하는 때에 반복문을 빠져나올 수 있다.
아래 예시의 반복문은 사용자에게 일련의 숫자를 입력하도록 안내하고, 사용자가 아무런 값도 입력하지 않으면 반복문을 종료한다.

let sum = 0;

while (true) {

  let value = +prompt("숫자를 입력하세요.", '');

  if (!value) break; // (*)

  sum += value;

}
alert( '합계: ' + sum );
(*)로 표시한 줄에 있는 break는 사용자가 아무것도 입력하지 않거나 Cancel버튼을 눌렀을 때 활성화
이때 반복문이 즉시 중단되고 제어 흐름이 반복문 아래 첫 번째 줄로 이동
여기선 alert이 그 첫번째 줄이 된다. 

반복문의 시작 지점이나 끝 지점에서 조건을 확인하는 것이 아니라 본문 가운데 혹은 본문 여러 곳에서 
조건을 확인해야하는 경우, 무한 반복문 + break 조합을 사용하면 좋다.

< 다음 반복으로 넘어가기 >
continue 지시자는 break의 가벼운 버전이다. continue는 전체 반복문을 멈추지 않는다. 
대신! 현재 실행중인 이터레이션을 멈추고 반복문이 다음 이터레이션을 강제로 실행시키도록 한다. ( 조건을 통과할 때 )

이 예시는 continue를 사용해 홀수만 출력.
for (let i = 0; i < 10; i++) {

  // 조건이 참이라면 남아있는 본문은 실행되지 않고 ( 해당 조건 기준으로 그건 건너뛴다고 생각하자 )
  if (i % 2 == 0) continue;

  alert(i); // 1, 3, 5, 7, 9가 차례대로 출력됨
}

for (let i = 0; i < 10; i++) {

  if (i % 2) {
    alert( i );
  }

}

이렇게 생길 수도 있다! 

'?' 오른쪽엔 break나 continue가 올 수 없다. 
break나 continue 같은 지시자는 삼항 연산자에 사용하면 안된다. 

< break/continue와 레이블 > 
여러개의 중첩 반복문을 한 번에 빠져나와야 하는 경우가 종종 생기곤 한다. 
i와 j를 반복하면서 프롬포트 창에 (0,0)부터 (2,2)까지를 구성하는 좌표 ( i,j )를 입력하게 해주는 예시.

for (let i = 0; i < 3; i++) {

  for (let j = 0; j < 3; j++) {

    let input = prompt(`(${i},${j})의 값`, '');

    // 여기서 멈춰서 아래쪽의 `완료!`가 출력되게 하려면 어떻게 해야 할까요?
  }
}

alert('완료!');
여기서 반복문을 중단시킬 방법은 input아래에 평범한 break지시자를 사용하면 안쪽에 있는 반복문만 빠져나올 수 있다.
이것만으론 충분하지 않다. ( 두 개 다 빠져나와야하기때문에 ! ) 이럴때 레이블을 사용할 수 있다.

labelName: for (...) {
  ...
} 레이블은 반복문 앞에 콜론과 함께 쓰이는 식별자이다.

outer: for (let i = 0; i < 3; i++) {

  for (let j = 0; j < 3; j++) {

    let input = prompt(`(${i},${j})의 값`, '');

    // 사용자가 아무것도 입력하지 않거나 Cancel 버튼을 누르면 두 반복문 모두를 빠져나옵니다.
    if (!input) break outer; // (*)

    // 입력받은 값을 가지고 무언가를 함
  }
}
alert('완료!');

위 예시에서 break outer는 outer라는 레이블이 붙은 반복문을 찾고, 해당 반복문을 빠져나오게 해준다.
따라서 제어 흐름이 (*)에서 alert('완료!')로 바로 바뀐다. 

레이블은 별도의 줄에 써주는것도 가능하다. 
outer:
for (let i = 0; i < 3; i++) { ... }

continue 지시자를 레이블과 함께 사용하는것도 가능하다. 두가지를 같이 사용하면 레이블이 붙은 반복문의 
다음 이터레이션이 실행된다.

***** 레이블은 마음대로 '점프' 할 수 있게 해주지 않는다. 
레이블을 사용한다고 해서 원하는 곳으로 마음대로 점프할 수 있는 것은 아니다. 
아래 예시처럼 레이블을 사용하는 것은 불가능!!

break label; // 아래 for 문으로 점프할 수 없다.

label: for (...)
break와 continue는 반복문 안에서만 사용가능하며 레이블은 반드시 break나 continue지시자 위에 있어야한다. 

*/

/* 반복문의 마지막 값 
아래 코드를 실행했을 때 얼럿 창에 마지막으로 뜨는 값은 무엇일까요? 이유도 함께 설명해보세요. */
let i = 3;

while (i) {
  alert( i-- );
} 
// i가 0이 되면 while문 조건에 맞지 않기때문에 종료된다 ! alert에 나오는 숫자들은 3,2,1

/* while 반복문의 출력값 예상
while 반복문이 순차적으로 실행될 때마다 얼럿 창에 어떤 값이 출력될지 예상해보세요.

아래 두 예시는 같은 값을 출력할까요?
*/

// 전위형 증가 연산자를 사용한 경우 ( ++i )
let i = 0;
while (++i < 5) alert( i ); // 1부터 4까지만

// 후위형 증가 연산자를 사용한 경우 ( i++ )
let i = 0;
while (i++ < 5) alert( i ); // 1부터 5까지만 

/* for반복문의 출력값 예상하기 
for 반복문이 순차적으로 실행될 때마다 얼럿 창에 어떤 값이 출력될지 예상해보세요.

아래 두 예시는 같은 값을 출력할까요? */

for (let i = 0; i < 5; i++) alert( i ); // 전위 증가 연산자때문에 1부터 출력 될거라고 생각했는데, 왜 0부터 출력될까요? ㅠㅠ 
for (let i = 0; i < 5; ++i) alert( i ); // 0부터 4까지

let i =0;
for( ; i<5 ;){
    i++; // 증가연산자를 이렇게 안에 써주면 무한루프에 빠지지 않는다 
}

/* for 반복문을 이용하여 짝수 출력하기  
for 반복문을 이용하여 2부터 10까지 숫자 중 짝수만을 출력해보세요.
*/

for(let i=2; i<11; i++){
   if( i % 2 == 0 )
    alert(i);
}

/* 'for' 반복문을 'while' 반복문으로 바꾸기
for 반복문을 while 반복문으로 바꾸되, 동작 방식에는 변화가 없도록 해보세요. 출력 결과도 동일해야 합니다.
for (let i = 0; i < 3; i++) {
  alert( `number ${i}!` );
}
*/

let i = 0;
while(i<3){
    i++;
    alert(i);
} // 처음에 이렇게 작성했는데, 해답은 i++과 alert줄이 바뀌어 있었습니다.

let i = 0;
while (i < 3) {
  alert( `number ${i}!` );
  i++;
}

/* 사용자가 100보다 큰 숫자를 입력하도록 안내하는 프롬프트 창을 띄워보세요. 
사용자가 조건에 맞지 않은 값을 입력한 경우 반복문을 사용해 동일한 프롬프트 창을 띄워줍시다.
사용자가 100을 초과하는 숫자를 입력하거나 취소 버튼을 누른 경우, 혹은 아무것도 입력하지 않고 
확인 버튼을 누른 경우엔 더는 프롬프트 창을 띄워주지 않아도 됩니다.
사용자가 오직 숫자만 입력한다고 가정하고 답안을 작성하도록 해봅시다. 
숫자가 아닌 값이 입력되는 예외 상황은 처리하지 않아도 됩니다. */

let i;
    do {
       i = prompt("100을 초과하는 숫자를 입력해주세요.", 0);
    } while ( i <= 100 && i );

/* 
소수(prime number)는 자신보다 작은 두 개의 자연수를 곱하여 만들 수 없는 1보다 큰 자연수입니다.
다시 말해서 1과 그 수 자신 이외의 자연수로는 나눌 수 없는 자연수를 소수라고 부르죠.
5는 2나 3, 4로 나눌 수 없기 때문에 소수입니다. 5를 이들 숫자로 나누면 나머지가 있기 때문이죠.
2부터 n까지의 숫자 중 소수만 출력해주는 코드를 작성해봅시다.
n = 10이라면 결과는 2,3,5,7이 되어야겠죠.
주의: 작성한 코드는 임의의 숫자 n에 대해 동작해야 합니다.
 */

// 소수의 기준 범위 내 모든 숫자 i에 대해서 1과 i사이에 제수가 있는지를 확인! 있으면 소수가 아님 / 없으면 소수 

let n = prompt("숫자를 입력해주세요");

nextPrime: // 레이블 
for (let i = 2; i <= n; i++) { // 각 i에 대하여 반복문

  for (let j = 2; j < i; j++) { // 제수(나눗수)를 찾음
    if (i % j == 0) continue nextPrime; // 소수가 아니므로 다음 i로 넘어감
  }

  alert( i ); // 소수
}


