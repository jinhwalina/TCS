/*
< 논리 연산자 >
자바스크립트엔 세 종류의 논리 연산자 ||(OR), &&(AND), !(NOT)이 있다. 

< || ( or )> 
result = a || b;
    > 인수 중 하나라도 true이면 true를 반환하고, 그렇지 않으면 false를 반환

or 연산자는 이항 연산자이므로 아래와 같이 네가지 조합이 가능하다.
alert( true || true );   // true
alert( false || true );  // true
alert( true || false );  // true
alert( false || false ); // false

if (1 || 0) { // if( true || false ) 와 동일하게 동작합니다.
  alert( 'truthy!' );
} 이렇게도 적용될수있다. 

이 연산자는 if문에서 자주 사용되는데, 주어진 조건 중 하나라도 참인지 테스트 하는 용도로 쓰인다. 

let hour = 9;

if (hour < 10 || hour > 18) { 두가지만 가능한게 아니라 여러가지 조건이 들어갈 수 있다.
  alert( '영업시간이 아닙니다.' );
}

< 첫 번째 truthy를 찾는 OR 연산자 ‘||’ >
위까지의 경우는 피연산자가 불린형인 경우만이다. 하지만 자바스크립트에서만 제공하는 논리연산자 OR의 추가 기능이 있다.

 ***** OR 연산자와 피연산자가 여러 개인 경우 : result = value1 || value2 || value3;
    > 왼 - 오 순서대로 피연산자를 평가한다.
    > 각 피연산자를 불린형으로 변환. 
    > 변환 후 그 값이 true이면 연산을 멈추고, 해당 피연산자의 변환 전 원래 값을 반환한다.
    > 피연산자 모두를 평가한 경우 ( 모든 피연산자가 false로 평가되는 경우 )엔 마지막 피연산자 반환. 
        alert( undefined || null || 0 ); // 0 (모두 falsy이므로, 마지막 값을 반환함)

        1. 변수 또는 표현식으로 구성된 목록에서 첫번째 truthy 얻기.
            firstName, lastName, nickName이란 변수가 있는데 이 값들은 모두 옵션 값
            OR ||을 사용하면 실제 값이 들어있는 변수를 찾고, 그 값을 보여줄 수 있다.
            변수 모두에 값이 없는 경우, 익명을 보여준다.

            let firstName = "";
            let lastName = "";
            let nickName = "바이올렛";

            alert( firstName || lastName || nickName || "익명"); // 바이올렛

        2. 단락 평가
            OR 연산자 ||가 제공하는 또 다른 기능은 '단락 평가(short circuit evaluation)'다.
            위에 설명처럼 왼-오로 평가를 진행하는데 truthy를 만나면 나머지 값들은 건드리지 않은 채 평가를 멈춘다.
            이런 프로세스를 '단락 평가' 라고 한다.

            true || alert("not printed");
            false || alert("printed");

            첫 번째 줄의 || 연산자는 true를 만나자마자 평가를 멈추기 때문에 alert가 실행되지 않는다.
            단락 평가는 연산자 왼쪽 조건이 falsy일 때만 명령어를 실행하고자 할 때 자주 쓰임!!

< && (AND) >
전통적인 프로그래밍에서 AND 연산자는 두 피연산자가 모두가 참일 때 true를 반환 / 그 외에는 false

let hour = 12;
let minute = 30;

if (hour == 12 && minute == 30) {
  alert( '현재 시각은 12시 30분입니다.' );
}

< 첫 번째 falsy를 찾는 AND 연산자 ‘&&’ > 
***** AND 연산자와 피연산자가 여러 개인 경우 : result = value1 && value2 && value3;
    > 왼 - 오 순서대로 피연산자를 평가한다.
    > 각 피연산자는 불린형으로 변환. 변환 후 값이 false이면 평가를 멈추고 해당 피연산자의 변환 전 원래 값 변환
    > 피연산자 모두가 평가되는 경우 ( 모든 피연산자가 true로 평가되는 경우 )엔 마지막 피연산자가 반환.
    > 정리! 이 연산자는 첫 번째 falsy를 반환한다. 
            없다면? 마지막 값을 반환한다.
    alert( 1 && 2 && null && 3 ); // null
    alert( 1 && 2 && 3 ); // 마지막 값, 3

    &&의 우선순위가 || 보다 높다 

< ! ( not ) > 
result = !value;
이 연산자는 인수를 하나만 받고, 다음 순서대로 연산을 수행한다. 
1. 피연산자를 불린형( true/false )로 변환한다.
2. 1에서 변환된 값의 역을 반환한다.

alert( !true ); // false
alert( !0 ); // true

NOT을 두 개 연달아 사용(!!)하면 값을 불린형으로 변환할 수 있다.

alert( !!"non-empty string" ); // true
alert( !!null ); // false

이때, 첫 번째 not 연산자는 피연산자로 받은 값을 불린형으로 변환한 후 이 값의 역을 반환하고, 
두 번째 not 연산자는 첫 번째 not 연산자가 반환한 값의 역을 반환 한다. 이렇게 
연달아 사용하면 특정 값을 불린형으로 변환 할 수 있다. 

참고 !
1. 내장 함수 boolean을 사용하면 !!을 사용한 것과 같은 결과를 도출 할 수 있다. 
2. NOT 연산자의 우선순위는 모든 논리 연산자 중에서 가장 높기 때문에 항상 &&나 || 보다 먼저 실행된다. 
alert( Boolean("non-empty string") ); // true
alert( Boolean(null) ); // false

*/

/* 다음 OR 연산의 결과는 무엇일까요? */
alert( null || 2 || undefined ); // 피연산자 중 첫 번째 truthy인 2 !

/* OR 연산자의 피연산자가 alert라면? */
alert( alert(1) || 2 || alert(3) ); // alert(1) 의 결과가 참이기 때문에 첫번째 피연산자 > 1 출력 이라고 생각했습니다.
/* alert 메서드는 값을 반환하지 않는다! 즉 undefined를 반환한다. 
얼럿 창엔 1, 2가 차례대로 출력됩니다. ( 결과적으론 )

첫 번째 OR || 은 왼쪽 피연산자인 alert(1)를 평가합니다. 이때 첫 번째 얼럿 창에 1이 출력되죠.
alert메서드는 undefined를 반환하기 때문에, OR 연산자는 다음 피연산자를 평가하게 됩니다. truthy를 찾기 위해 말이죠.
두 번째 피연산자(오른쪽 피연산자)인 2는 truthy이기 때문에 실행이 멈추고 2가 반환됩니다. 반환된 값 2는 제일 바깥 alert의 피연산자가 되어 두 번째 얼럿창에 출력됩니다.
평가가 alert(3)까지 진행되지 않기 때문에 3은 출력되지 않습니다.
*/

/* AND 연산자의 피연산자가 alert 라면? */
alert( alert(1) && alert(2) );
/* undefined이 출력될 것으로 예상. 
창에 메세지만 띄워주고 의미 있는 값을 반환해 주지 않는다. 
왼쪽 피연산자 평가후 > 1 창에 출력. > 평가를 멈춘다 ( alert(1) 평가 결과는 undefined로 falsy이기 때문 ! )
*/

/* AND 연산의 결과는 무엇일까요? */
alert( 1 && null && 2 );
/* null이 출력될것으로 예상. */

/* OR AND OR 연산자로 구성된 표현식 */
alert( null || 2 && 3 || 4 );
/* 창에는 3이 출력된다. 이때 ! 연산자의 우선 순위를 생각해야한다. 연산자 &&의 우선순위는 ||보다 높다. 
> 따라서 &&가 먼저 실행!! 
> 2 && 3 = 3
최종으로는 null이후 첫번째 truthy인 3이 출력된다. 
*/

/* age(나이)가 14세 이상 90세 이하에 속하는지를 확인하는 if문을 작성하세요.
"이상과 이하"는 age(나이) 범위에 14나 90이 포함된다는 의미입니다. */

let age = prompt("나이는 무엇인가요?");

if (age >= 14 && age <= 90){
  alert('나이가 조건에 포함됩니다!');
} else {
  alert('조건에 맞지 않네요ㅠㅠ');
}

/* age(나이)가 14세 이상 90세 이하에 속하지 않는지를 확인하는 if문을 작성하세요.
답안은 NOT ! 연산자를 사용한 답안과 사용하지 않은 답안 2가지를 제출해 주세요. */

if (! (age >= 14 && age <= 90) );
if ( age > 14 || age < 90);

/* 아래 표현식에서 어떤 alert가 실행될까요?
if(...) 안에 표현식이 있으면 어떤 일이 일어날까요?
 */

if (-1 || 0) alert( 'first' ); // 실행된다, -1||0은 -1 > truthy
if (-1 && 0) alert( 'second' ); // -1&&0은 0 > falsy 따라서 실행되지 않는다. 
if (null || -1 && 1) alert( 'third' ); 
/* 연산자 &&는 ||보다 우선순위가 높다. 
따라서 -1 && 1 이 먼저 실행되고, 아래와 같이 표현식이 순차적으로 바뀐다. 
null || -1 && 1  ->  null || 1  ->  1
결과적으로 alert가 실행
*/

/* 로그인 창 구현하기 */
let loginId = prompt("아이디는 무엇인가요?", '');
let loginPw = prompt("비밀번호를 입력해주세요", '');                                                                                                                                                                                                                                                                                                                                                                                                                                      

if( loginId == "Admin") {
  alert(loginPw); // 이렇게 작성해도 되는지 궁금합니다! 
  if( loginPw == "TheMaster") {
    alert("환영합니다 ^^");
  } else if (loginPw == '' || loginPw == null){
    alert("취소되었습니다");
  } else {
    alert("인증에 실패하였습니다!");
  }
  
} // 제가 쓴 코드는 여기까지 입니다.

// 여기서 고려하지 않은 부분! 패스워드에 해당하는 조건들은 if문으로 처리 해줬지만, 
// 사용자 이름을 입력할 때 조건을 처리 하지 않았다.
// 밖에 있는 if문에 사용자 이름에 관한 조건도 처리해줘야한다.
